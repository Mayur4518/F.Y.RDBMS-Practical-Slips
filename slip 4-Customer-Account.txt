slip-4:Customer-Account
create table customer(cno int primary key,cname varchar(20),city varchar(20));
create table Account(a_no int primary key,a_type varchar(20),opening_date date,balance money,cno int references customer);

insert into customer values(101,'om','shrirampur');
insert into customer values(102,'sai','shrirampur');
insert into customer values(103,'ram','shirdi');

insert into account values(10,'saving','2020-12-10','4000',101);
insert into account values(20,'saving','2021-05-18','6000',102);
insert into account values(30,'current','2020-10-19','9000',101);
insert into account values(40,'current ','2019-03-18','2000',102);
insert into account values(50,'saving','2023-01-30','8000',103);

select*from customer;
select*from account;

A)Write a function which accepts account no as an input and prints the details of that aacount.

create or replace function disp_acct(ano account.a_no%type)returns void as
$$
declare
a1 account%rowtype;
begin
select*into a1 from account where a_no=ano;
raise notice'Account No=%',a1.a_no;
raise notice'Account Type=%',a1.a_type;
raise notice'Date=%',a1.opening_date;
raise notice'Balance=%',a1.balance;
end;
$$
language plpgsql;

select disp_acct(40);

B)Write a function using cursor which accepts customer name and prints all account details of that customer.If the customer name IS INVALID,PRINT APPROPRIATE MESSAGE.

create or replace function disp_msg(name customer.cname%type)returns void as
$$
declare
a int=0;
c account%rowtype;
c1 cursor for select*from account,customer where customer.cno=account.cno and cname=name;
begin
open c1;
  loop
  fetch c1 into c;
exit when not found;
 raise notice'Account No=%',c.a_no;
raise notice'Account Type=%',c.a_type;
raise notice'Date=%',c.opening_date;
raise notice'Balance=%',c.balance;
a=a+1;
end loop;
if(a=0)then
raise exception'Invalid Customer name';
end if;
close c1;
end;
$$
language plpgsql;

select disp_msg('mayur');


C)Write a trigger which is executed whenever update is made to the account table.If the balance becomes less than 1000,print an error message that balance cannot be less than 1000.

create or replace function trig()returns trigger as
$$
declare
begin
  if(new.balance<'1000')then
  raise exception'balance cannot be less than 1000';
 end if;
return new;
end;
$$
language plpgsql;

create trigger t2
after update on account
for each row
execute procedure trig();

update set account balance='900' where balance='8000';
 